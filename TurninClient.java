import java.awt.*;import java.awt.event.*;import java.io.*;import java.util.*;import javax.swing.*;//import javax.swing.filechooser.*;   //for MyFileFilter classimport java.net.*;                  //for ServerIO classpublic class TurninClient extends JFrame {	private final static String VERSION = "4.1";	private ServerIO server;	JLabel header1 = new JLabel();	JLabel copyrightLabel = new JLabel();	JLabel serverLabel = new JLabel();	JTextField serverNameField = new JTextField();	JLabel userLabel = new JLabel();	JTextField userNameField = new JTextField();	JLabel courseLabel = new JLabel();	JComboBox courseChoice = new JComboBox();	JLabel labLabel = new JLabel();	JComboBox labChoice = new JComboBox();	JButton submitButton = new JButton();	JLabel msgLabel = new JLabel();	private String course;	private String lab;/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	public static void main(String[] args) {		try {			// For Metal Look and Feel, comment out the try-catch block.			try {				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());			} 			catch (Exception e) { }			TurninClient frame = new TurninClient();			frame.initComponents();			frame.setVisible(true);		}		catch (Exception e) {			e.printStackTrace();		}	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	public TurninClient() {	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	public void initComponents() throws Exception {		// the following code sets the frame's initial state		header1.setSize(new Dimension(510, 29));		header1.setLocation(new Point(8, 29));		header1.setVisible(true);		header1.setText("Turnin Version " + VERSION);		header1.setForeground(Color.white);		header1.setHorizontalAlignment(JLabel.CENTER);		header1.setFont(new Font("SansSerif", Font.BOLD, 24));		copyrightLabel.setSize(new Dimension(260, 20));		copyrightLabel.setLocation(new Point(130, 60));		copyrightLabel.setVisible(true);		copyrightLabel.setText("(c)1998-2005 TCU Computer Science Department");		copyrightLabel.setForeground(Color.white);		copyrightLabel.setHorizontalAlignment(JLabel.CENTER);		copyrightLabel.setFont(new Font("Serif", Font.BOLD, 10));		serverLabel.setSize(new Dimension(55, 20));		serverLabel.setLocation(new Point(5, 85));		serverLabel.setVisible(true);		serverLabel.setText("Server:");		serverLabel.setForeground(Color.white);		serverLabel.setHorizontalAlignment(JLabel.RIGHT);		serverLabel.setFont(new Font("SansSerif", 0, 14));		serverNameField.setSize(new Dimension(203, 18));		serverNameField.setLocation(new Point(62, 86));		serverNameField.setVisible(true);		serverNameField.setText("riogrande.cs.tcu.edu");		serverNameField.setHorizontalAlignment(JTextField.LEFT);		serverNameField.setFont(new Font("Monospaced", 0, 12));		serverNameField.setEnabled(false);		serverNameField.setDisabledTextColor(Color.darkGray);		serverNameField.setEditable(false);		userLabel.setSize(new Dimension(55, 20));		userLabel.setLocation(new Point(5,120));		userLabel.setVisible(true);		userLabel.setText("E-mail:");		userLabel.setForeground(Color.white);		userLabel.setHorizontalAlignment(JLabel.RIGHT);		userLabel.setFont(new Font("SansSerif", 0, 14));		userNameField.setSize(new Dimension(203, 18));		userNameField.setLocation(new Point(62, 121));		userNameField.setVisible(true);		userNameField.setText("@tcu.edu");		userNameField.setHorizontalAlignment(JTextField.LEFT);		userNameField.setFont(new Font("Monospaced", 0, 12));		courseLabel.setSize(new Dimension(55, 20));		courseLabel.setLocation(new Point(297,85));		courseLabel.setVisible(true);		courseLabel.setText("Course");		courseLabel.setForeground(Color.white);		courseLabel.setHorizontalAlignment(JLabel.RIGHT);		courseLabel.setFont(new Font("SansSerif", 0, 14));		courseChoice.setSize(new Dimension(124,20));		courseChoice.setLocation(new Point(360,83));		courseChoice.setVisible(true);		courseChoice.setFont(new Font("Serif", 0, 12));		labLabel.setSize(new Dimension(88, 20));		labLabel.setLocation(new Point(265,120));		labLabel.setVisible(true);		labLabel.setText("Assignment");		labLabel.setForeground(Color.white);		labLabel.setHorizontalAlignment(JLabel.RIGHT);		labLabel.setFont(new Font("SansSerif", 0, 14));		labChoice.setSize(new Dimension(86,20));		labChoice.setLocation(new Point(360,118));		labChoice.setVisible(true);		labChoice.setFont(new Font("Serif", 0, 12));		submitButton.setSize(new Dimension(95,29));		submitButton.setLocation(new Point(220,154));		submitButton.setVisible(true);		submitButton.setText("Submit");		submitButton.setFont(new Font("SansSerif", Font.BOLD, 14));		msgLabel.setSize(new Dimension(506,29));		msgLabel.setLocation(new Point(10,200));		msgLabel.setVisible(true);		msgLabel.setText("");		msgLabel.setForeground(Color.white);		msgLabel.setHorizontalAlignment(JLabel.CENTER);		msgLabel.setFont(new Font("SansSerif", Font.BOLD, 18));		setLocation(new Point(150, 75));		getContentPane().setLayout(null);		setTitle("Turnin");		setResizable(false);		getContentPane().setBackground(new Color(111, 64, 135));		((JPanel)getContentPane()).setOpaque(true);   //why is this necessary for Linux?		getContentPane().add(header1);		getContentPane().add(copyrightLabel);		getContentPane().add(serverLabel);		getContentPane().add(serverNameField);		getContentPane().add(userLabel);		getContentPane().add(userNameField);		getContentPane().add(courseLabel);		getContentPane().add(courseChoice);		getContentPane().add(labLabel);		getContentPane().add(labChoice);		getContentPane().add(submitButton);		getContentPane().add(msgLabel);		setSize(new Dimension(526, 323));		// connect to the server		try {			BufferedReader initFile = new BufferedReader(new FileReader("TurninClient.ini"));			String line = initFile.readLine();			StringTokenizer tok = new StringTokenizer(line);			String server = tok.nextToken();	//server IP name			int port = Integer.parseInt(tok.nextToken());	//TCP port number			openServer(server, port, VERSION);			serverNameField.setText(server);		} catch(Exception e) {			msgLabel.setText("IO Error for file TurninClient.ini");		}				// event handling		courseChoice.addItemListener(new ItemListener() {			public void itemStateChanged(ItemEvent e) {				courseChoiceItemStateChanged(e);			}		});		labChoice.addItemListener(new ItemListener() {			public void itemStateChanged(ItemEvent e) {				labChoiceItemStateChanged(e);			}		});		submitButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				submitButtonActionPerformed(e);			}		});		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent e) {				thisWindowClosing(e);			}		});	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	void thisWindowClosing(WindowEvent e) {		setVisible(false);		dispose();		if (server.connected) server.close();		System.exit(0);	}	void courseChoiceItemStateChanged(ItemEvent e) {		msgLabel.setText("");		//clear the msg		if (e.getStateChange() == ItemEvent.SELECTED) {			course = (String)e.getItem();			if (labChoice.getItemCount() > 0)				labChoice.removeAllItems();			lab = "";			String labList = server.getLabs(course);			StringTokenizer tok = new StringTokenizer(labList, " \t\n\r");			while (tok.hasMoreTokens())				labChoice.addItem(tok.nextToken());			if (labChoice.getItemCount() > 0)				lab = (String)labChoice.getItemAt(0);			else				lab = "";		}	}	void labChoiceItemStateChanged(ItemEvent e) {		msgLabel.setText("");		//clear the msg		if (e.getStateChange() == ItemEvent.SELECTED) {			lab = (String)e.getItem();		}	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	void submitButtonActionPerformed(ActionEvent e) {		String arg = e.getActionCommand();		if (arg.equals("QUIT"))			System.exit(1);		msgLabel.setText("");		//clear the msg// When the user presses the Submit button//	1. Check to see that the user is valid for the selected course//		and that the selected lab is still being accepted//	2. Have the user select a file//	3. Send "submit" command to the server//	4. Encode the file piping the output to the server//	5. Get the receipt number from the server		String labAttributes = server.getLabAttributes(course,lab);		String remindString = null;		int remindPos = labAttributes.toLowerCase().indexOf("remind");		if (remindPos >= 0) {			remindString = labAttributes.substring(remindPos+7);			labAttributes = labAttributes.substring(0,remindPos-1);		}		String labList = server.getLabs(course);		String user = userNameField.getText().toLowerCase();		File file;		if (arg.equals("Submit")) {			String count = server.getCount(user, course, lab);			if (!(count.equals("0"))) {				String warningTempStr = "You have made " + count;				if (count.equals("1"))					warningTempStr += " previous submittal for this assignment.";				else					warningTempStr += " previous submittals for this assignment.";				JOptionPane.showMessageDialog(this, warningTempStr,				     "Multiple Submittal Warning", JOptionPane.WARNING_MESSAGE);			}			if (remindString != null) {				JOptionPane.showMessageDialog(this, remindString);			}			if (inList(lab, labList)) {				int pos = labAttributes.toLowerCase().indexOf("type=");				if (pos >= 0) {					String temp = labAttributes.substring(pos+5);					pos = temp.indexOf(",");					if (pos > 0)						temp = temp.substring(0,pos);					file = getFile(temp, course, lab);				} else					file = getFile("", "All", "");				if (file != null) {					if (inList(lab, labList)) {						sendIt(user, labAttributes, file);		//send immediately					} else						msgLabel.setText("Invalid user/course/assignment");				}			} else				msgLabel.setText("Invalid user/course/assignment");		}	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	void sendIt(String user, String labAttributes, File file) {//		setCursor(WAIT_CURSOR);		String name = "";		if (labAttributes.toLowerCase().indexOf("norename") < 0) {			name = user;			int atSignPos = name.indexOf("@");			if (atSignPos >= 0)				name = name.substring(0,atSignPos);			String initials = "";			while (name.indexOf('.') > 0) {     //put initials after surname				int pos = name.indexOf('.');				initials += "_" + name.substring(0,pos);				name = name.substring(pos+1);			}			name = name + initials + "_" + lab + "_" + file.getName();		} else			name = file.getName();		String msgID = server.submit(file, name, user, course, lab);//		setCursor(DEFAULT_CURSOR);		if (msgID.startsWith("200 ")) {			String receipt = msgID.substring(4);			msgLabel.setText("Your receipt number is " + receipt);		} else			msgLabel.setText(msgID);	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	public File getFile(String types, String course, String lab) {// Put up a file dialog to allow the user to select a file		File file = null;		JFileChooser fc = new JFileChooser("U:\\");		javax.swing.filechooser.FileFilter ff = new MyFileFilter(types, course + " " + lab + " files");		fc.setFileFilter(ff);		int returnVal = fc.showOpenDialog(this);		if (returnVal == JFileChooser.APPROVE_OPTION)			file = fc.getSelectedFile();		return file;	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	public boolean inList (String item, String list) {// Check to see whether "item" is a token in "list"		StringTokenizer tok = new StringTokenizer(list);		boolean found = false;		while (tok.hasMoreTokens() && !found)			found = item.equals(tok.nextToken());		return found;	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */	private void openServer(String serverID, int port, String version) {		server = new ServerIO(serverID, port, version);		if (server.connected) {			String line = server.getCourses();			StringTokenizer tok = new StringTokenizer(line, " \t\n\r");			while (tok.hasMoreTokens())				courseChoice.addItem(tok.nextToken());			if (courseChoice.getItemCount() > 0)				course = (String)courseChoice.getItemAt(0);			String labList = server.getLabs(course);			tok = new StringTokenizer(labList, " \t\n\r");			while (tok.hasMoreTokens())				labChoice.addItem(tok.nextToken());			if (labChoice.getItemCount() > 0)				lab = (String)labChoice.getItemAt(0);			if (!server.getVersion().equals(version)) {				submitButton.setText("QUIT");				msgLabel.setText("***Wrong version of Turnin***");			}		} else {			submitButton.setText("QUIT");			msgLabel.setText("***Could not establish contact with Server***");		}	}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */}/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */class MyFileFilter extends javax.swing.filechooser.FileFilter {	private String description;	private String ext = "";		public MyFileFilter(String types, String desc) {		description = desc;		StringTokenizer t = new StringTokenizer(types,"|");		while(t.hasMoreTokens()) {			ext += "." + t.nextToken() + "|";		}	}		public void setDescription(String desc) {		description = desc;	}	public String getDescription() {		return description;	}	public boolean accept(File f) {		if (f.isDirectory() || ext.equals(""))			return true;		String name = f.getName();		int pos = name.lastIndexOf(".");		if (pos < 0)			return false;		return ext.indexOf(name.substring(pos)+"|") >= 0;	}}/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */class ServerIO {	private Socket turninSocket = null;	private DataOutputStream os = null;	private BufferedReader is = null;	private String version = null;	protected boolean connected;public ServerIO (String serverID, int port, String version) {	this.version = version;	try {		turninSocket = new Socket(serverID, port);		os = new DataOutputStream(turninSocket.getOutputStream());		is = new BufferedReader(new InputStreamReader(turninSocket.getInputStream()));	} catch (UnknownHostException e) {		System.out.println("Can't find the TURNIN server");	} catch (IOException e) {		System.out.println("TURNIN server is not responding");	}	connected = (turninSocket != null && os != null && is != null);}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public void close() {	try {		os.writeBytes("Bye\r\n");		os.close();		is.close();		turninSocket.close();	} catch (IOException e) {		System.err.println("Error trying to close connection to server");	}}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getCourses() {	String response = null;	try {		os.writeBytes(version + "courses\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attemping to get courses");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getLabs(String course) {	String response = null;	try {		os.writeBytes("labs " + course + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attempting to get labs");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getLabAttributes(String course, String lab) {	String response = null;	try {		os.writeBytes("attributes " + course + "\t" + lab + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attempting to get lab attributes for " + course + " " + lab);	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getReceipt(String user) {	String response = null;	try {		os.writeBytes("receipt " + user + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attempting to get receipt");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getUsers(String course) {	String response = null;	try {		os.writeBytes("users " + course + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attempting to get users");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getMail(String course) {	String response = null;	try {		os.writeBytes("mail " + course + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attempting to get e-mail address");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getVersion() {	String response = null;	try {		os.writeBytes("version\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attemping to get version");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String getCount(String user, String course, String lab) {	String response = null;	try {		os.writeBytes("count " + user + "\t" + course + "\t" + lab + "\r\n");		response = is.readLine();	} catch (IOException e) {		System.err.println("I/O failed attemping to get count of submittals");	}	return response;}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */public String submit(File file, String name, String user, String course, String lab) {	String msgID = "";	try {		os.writeBytes("submit " + user + "\t" + course + "\t" + lab + "\t" + name + "\t" + file.length() + "\r\n");		String reply = is.readLine();		if (!(reply.startsWith("200 ")))			return reply;		DataInputStream fis = new DataInputStream(new FileInputStream(file));		long len = file.length();		byte[] ba = new byte[(int)len];		fis.readFully(ba);		os.write(ba);		msgID = is.readLine();		if (fis != null) fis.close();	} catch (UnknownHostException e) {		System.err.println("Unknown host exception attemping to submit file");	} catch (IOException e) {		System.err.println("I/O error attemping to submit file");	}	return msgID;}}